//verwaltet alle Entit√§ten

class EntityManager {

    type val global = new EntityManager
    private new;
    type def register (e : Entity) : int {

        if (freeList.empty()) {
            val id = entities.size()
            entities += e
            return id
        }
        
        val id = freeList.removeLast()
        entities(id) = e
        return id
    }

    private val entities = new container.ArrayBuffer[Entity](1024)
    private val freeList = new container.ArrayBuffer[int]

    def getAllInDistance (base : Entity, distance : float, typ : Class[Entity])
     : ArrayBuffer[Pair[Entity, float]] {

        val r = ArrayBuffer[Pair[Entity, float]]
        val d = distance * distance

        entities.foreach e do {
            if(e != null || base != e){

                if(typ ? e) {
                    val d2 = distanceSquared(e, base)
                    if(d2 <= d) {
                        r += new Pair[Entity, float](e, d2.sqrt())
                    }
                }
            }
        }
    }
}
